document.addEventListener('DOMContentLoaded', function() {
    const notifyBtns = document.querySelectorAll('.bubble-btn');
    const countdownEl = document.getElementById('countdown');
    const notificationEl = document.getElementById('notification');
    const langZhBtn = document.getElementById('langZh');
    const langEnBtn = document.getElementById('langEn');
    const titleEl = document.getElementById('title');
    const subtitleEl = document.getElementById('subtitle');
    const userInfoEl = document.getElementById('userInfo');
    const userNameEl = document.getElementById('userName');
    const userAvatarEl = document.getElementById('userAvatar');
    const countdownNameEl = document.getElementById('countdownName');
    const countdownTextEl = document.getElementById('countdownText');
    const countdownAvatarEl = document.getElementById('countdownAvatar');
    const editProfileBtn = document.getElementById('editProfile');
    const profileModal = document.getElementById('profileModal');
    const closeModalBtn = document.querySelector('.close-btn');
    const saveProfileBtn = document.getElementById('saveProfile');
    const nicknameInput = document.getElementById('nickname');
    const emojiOptions = document.querySelectorAll('.emoji-option');
    const modalTitle = document.getElementById('modalTitle');
  
  
const historyData = JSON.parse(localStorage.getItem('notificationHistory')) || [];

    const webhookUrl = 'https://trigger.macrodroid.com/16c8a69d-d6b2-40f4-9b93-5d76880f3527/webhook';

    // Â§öËØ≠Ë®ÄÊñáÊú¨
    const translations = {
        zh: {
            title: "CALL ME",
            subtitle: "ÁÇπÂáª‰∏ãÊñπÊåâÈíÆÔºåÊàë‰ºöÁ´ãÂç≥Êî∂Âà∞ÈÄöÁü•",
            bubble1: "Âø´‰∏äÁ∫ø",
            bubble2: "Ë°•Êä§Áõæ",
            bubble3: "Á¥ßÊÄ•ÊÉÖÂÜµ",
            bubble4: "È¢ÜÂ•ñÂìÅ",
            countdownText: "ËØ∑Á≠âÂæÖ {seconds} ÁßíÂêéÂÜçËØï",
            successMsg: "ÂèëÈÄÅÊàêÂäü!",
            errorMsg: "ÂèëÈÄÅÂ§±Ë¥•: {error}",
            cooldownMsg: "ÂÜ∑Âç¥‰∏≠Ôºå{seconds}ÁßíÂêéÂèØÂÜçÊ¨°ÂèëÈÄÅ",
            bindTitle: "ÁªëÂÆöË¥¶Âè∑",
            editTitle: "ÁºñËæëËµÑÊñô",
            nicknamePlaceholder: "ËæìÂÖ•‰Ω†ÁöÑÊòµÁß∞",
            saveBtn: "‰øùÂ≠ò‰ø°ÊÅØ",
            unregistered: "Êú™ÁªëÂÆöÁî®Êà∑",
            defaultName: "Áé©ÂÆ∂"
        },
        en: {
            title: "CALL ME",
            subtitle: "Click the button below to notify me immediately",
            bubble1: "Get online",
            bubble2: "Shield up",
            bubble3: "Emergency",
            bubble4: "Claim rewards",
            countdownText: "Please wait {seconds} seconds",
            successMsg: "Sent successfully!",
            errorMsg: "Failed to send: {error}",
            cooldownMsg: "Cooldown, try again in {seconds}s",
            bindTitle: "Bind Account",
            editTitle: "Edit Profile",
            nicknamePlaceholder: "Enter your nickname",
            saveBtn: "Save Profile",
            unregistered: "Unregistered",
            defaultName: "Player"
        }
    };

    let currentLang = 'zh';
    let canClick = true;
    let countdownInterval;
    let isRequestPending = false;
    let selectedEmoji = 'üê∂';

    // ÂàùÂßãÂåñÁî®Êà∑ËµÑÊñô
    let userProfile = JSON.parse(localStorage.getItem('userProfile')) || null;

    // Âä†ËΩΩÁî®Êà∑ËµÑÊñô
    function loadProfile() {
        if (!userProfile) {
            showProfileModal(true);
            userNameEl.textContent = translations[currentLang].unregistered;
            userAvatarEl.textContent = 'üë§';
            return;
        }
        
        userNameEl.textContent = userProfile.nickname || translations[currentLang].defaultName;
        userAvatarEl.textContent = userProfile.emoji || 'üë§';
    }

    // ÊòæÁ§∫/ÈöêËóèÊ®°ÊÄÅÊ°Ü
    function showProfileModal(isNewUser = false) {
        modalTitle.textContent = isNewUser 
            ? translations[currentLang].bindTitle 
            : translations[currentLang].editTitle;
            
        nicknameInput.value = userProfile?.nickname || '';
        nicknameInput.placeholder = translations[currentLang].nicknamePlaceholder;
        
        // ÈáçÁΩÆÂ§¥ÂÉèÈÄâÊã©
        emojiOptions.forEach(option => {
            option.classList.remove('active');
            if (option.dataset.emoji === (userProfile?.emoji || 'üê∂')) {
                option.classList.add('active');
                selectedEmoji = option.dataset.emoji;
            }
        });
        
        profileModal.classList.add('show');
    }

    // ‰øùÂ≠òÁî®Êà∑ËµÑÊñô
    function saveProfile() {
        const nickname = nicknameInput.value.trim();
        
        if (!nickname) {
            alert(translations[currentLang].nicknamePlaceholder);
            return;
        }
        
        userProfile = {
            nickname,
            emoji: selectedEmoji
        };
        
        localStorage.setItem('userProfile', JSON.stringify(userProfile));
        profileModal.classList.remove('show');
        
        // Êõ¥Êñ∞UI
        userNameEl.textContent = userProfile.nickname;
        userAvatarEl.textContent = userProfile.emoji;
    }

    // Êõ¥Êñ∞ËØ≠Ë®Ä
    function updateLanguage(lang) {
        currentLang = lang;
        const t = translations[lang];

        titleEl.textContent = t.title;
        subtitleEl.textContent = t.subtitle;

        const bubbles = document.querySelectorAll('.bubble-btn');
        bubbles[0].innerHTML = `<i class="fas fa-bolt"></i> ${t.bubble1}`;
        bubbles[1].innerHTML = `<i class="fas fa-shield-alt"></i> ${t.bubble2}`;
        bubbles[2].innerHTML = `<i class="fas fa-exclamation-triangle"></i> ${t.bubble3}`;
        bubbles[3].innerHTML = `<i class="fas fa-gift"></i> ${t.bubble4}`;

        // Êõ¥Êñ∞ÊåâÈíÆ
        langZhBtn.classList.toggle('active', lang === 'zh');
        langEnBtn.classList.toggle('active', lang === 'en');
        
        // Êõ¥Êñ∞Áî®Êà∑‰ø°ÊÅØ
        if (userProfile) {
            userNameEl.textContent = userProfile.nickname;
        } else {
            userNameEl.textContent = t.unregistered;
        }
    }

    function showNotification(message, isSuccess = true) {
        notificationEl.innerHTML = isSuccess 
            ? `<i class="fas fa-check-circle"></i> ${message}`
            : `<i class="fas fa-exclamation-circle"></i> ${message}`;
            
        notificationEl.className = 'notification ' + (isSuccess ? 'success' : 'error');
        notificationEl.classList.add('show');

        setTimeout(() => {
            notificationEl.classList.remove('show');
        }, 3000);
    }

    function startCountdown(initialSeconds = 60) {
        let seconds = initialSeconds;
        canClick = false;
        notifyBtns.forEach(btn => btn.disabled = true);
        countdownEl.classList.add('show');

        const t = translations[currentLang];
        
        // Êõ¥Êñ∞ÂÄíËÆ°Êó∂ÊòæÁ§∫
        countdownNameEl.textContent = userProfile ? userProfile.nickname : t.defaultName;
        countdownTextEl.textContent = t.cooldownMsg.replace('{seconds}', seconds);
        countdownAvatarEl.textContent = userProfile 
            ? userProfile.emoji 
            : 'üë§';

        countdownInterval = setInterval(() => {
            seconds--;
            countdownTextEl.textContent = t.cooldownMsg.replace('{seconds}', seconds);

            if (seconds <= 0) {
                clearInterval(countdownInterval);
                notifyBtns.forEach(btn => btn.disabled = false);
                countdownEl.classList.remove('show');
                canClick = true;
                localStorage.removeItem('lastClickTime');
            }
        }, 1000);
    }

    // ÂàùÂßãÂåñÁî®Êà∑ËµÑÊñô
    loadProfile();

    // ËØ≠Ë®ÄÂàáÊç¢
    langZhBtn.addEventListener('click', () => updateLanguage('zh'));
    langEnBtn.addEventListener('click', () => updateLanguage('en'));

    // ÁºñËæëËµÑÊñôÊåâÈíÆ
    editProfileBtn.addEventListener('click', () => showProfileModal(false));

    // ÂÖ≥Èó≠Ê®°ÊÄÅÊ°Ü
    closeModalBtn.addEventListener('click', () => profileModal.classList.remove('show'));
    
    // ÁÇπÂáªÊ®°ÊÄÅÊ°ÜÂ§ñÈÉ®ÂÖ≥Èó≠
    profileModal.addEventListener('click', (e) => {
        if (e.target === profileModal) {
            profileModal.classList.remove('show');
        }
    });

    // EmojiÈÄâÊã©
    emojiOptions.forEach(option => {
        option.addEventListener('click', () => {
            emojiOptions.forEach(opt => opt.classList.remove('active'));
            option.classList.add('active');
            selectedEmoji = option.dataset.emoji;
        });
    });

    // ‰øùÂ≠òËµÑÊñô
    saveProfileBtn.addEventListener('click', saveProfile);
// Âú®ÂèëÈÄÅÊàêÂäü/Â§±Ë¥•Êó∂Ê∑ªÂä†ËÆ∞ÂΩï
function addHistoryRecord(message, isSuccess) {
    const history = JSON.parse(localStorage.getItem('notificationHistory')) || [];
    
    history.unshift({
        timestamp: new Date().toISOString(),
        message,
        nickname: userProfile?.nickname || 'Êú™ÁªëÂÆöÁî®Êà∑',
        emoji: userProfile?.emoji || 'üë§',
        status: isSuccess ? 'success' : 'error'
    });

    localStorage.setItem('notificationHistory', JSON.stringify(history.slice(0, 100))); // ÈôêÂà∂100Êù°
}
    // Ê∞îÊ≥°ÊåâÈíÆÁÇπÂáª‰∫ã‰ª∂
    notifyBtns.forEach(btn => {
        btn.addEventListener('click', async function() {
            if (!canClick || isRequestPending) return;
            
            // Ê£ÄÊü•ÊòØÂê¶Â∑≤ÁªëÂÆöË¥¶Âè∑
            if (!userProfile) {
                showNotification(translations[currentLang].bindTitle, false);
                showProfileModal(true);
                return;
            }

            const message = this.dataset.message;
            canClick = false;
            isRequestPending = true;
            localStorage.setItem('lastClickTime', Date.now());
            startCountdown();

            try {
                // ÂèëÈÄÅÁî®Êà∑‰ø°ÊÅØ
                const params = new URLSearchParams({
                    message: message,
                    nickname: userProfile.nickname,
                    emoji: userProfile.emoji
                });
                addHistoryRecord(message, true);
                const response = await fetch(
                    `${webhookUrl}?${params}`, {
                        method: 'GET'
                    }
                );

                if (!response.ok) throw new Error(`HTTPÈîôËØØ: ${response.status}`);

                const t = translations[currentLang];
                showNotification(t.successMsg);
            } catch (error) {
                const t = translations[currentLang];
                showNotification(t.errorMsg.replace('{error}', error.message), false);
                addHistoryRecord(message, false);
            } finally {
                isRequestPending = false;
            }
        });
    });

    // Â§ÑÁêÜÂÜ∑Âç¥Áä∂ÊÄÅ
    const lastClickTime = localStorage.getItem('lastClickTime');
    if (lastClickTime) {
        const remainingTime = Math.max(0, 60 - Math.floor((Date.now() - lastClickTime) / 1000));
        if (remainingTime > 0) {
            startCountdown(remainingTime);
        }
    }
    // Ê∑ªÂä†ÂéÜÂè≤ËÆ∞ÂΩïÊåâÈíÆ (Âú®top-barÊ∑ªÂä†)
const historyBtn = document.createElement('button');
historyBtn.className = 'icon-btn';
historyBtn.title = 'ÂéÜÂè≤ËÆ∞ÂΩï';
historyBtn.innerHTML = '<i class="fas fa-history"></i>';
historyBtn.addEventListener('click', () => window.location.href = 'history.html');
document.querySelector('.top-controls').prepend(historyBtn);
});
